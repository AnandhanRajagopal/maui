parameters:
  poolName: ''
  clearCaches: true
  skipXcode: false
  skipProvisioning: $(skipProvisionator)
  skipAndroidSdks: false
  skipAndroidImages: false
  installDefaultAndroidApi: false
  checkoutDirectory: $(System.DefaultWorkingDirectory)
  provisionatorPath: $(provisionator.path)
  provisionatorXCodePath: $(provisionator.xcode)
  provisionatorChannel: 'latest'
  provisionatorExtraArguments: $(provisionator.extraArguments)
  gitHubToken: $(github--pat--vs-mobiletools-engineering-service2)
  certPass: $(pass--components-mac-ios-certificate-p12)
  federatedServiceConnection: 'dotnetbuilds-internal-read'
  outputVariableName: 'dotnetbuilds-internal-container-read-token'
  expiryInHours: 1
  base64Encode: false

steps:

  - task: UseDotNet@2                 # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops
    displayName: 'Use .NET SDK $(DOTNET_VERSION)'
    inputs:
      packageType: sdk
      version: $(DOTNET_VERSION)
      includePreviewVersions: true

  - pwsh: |
      dotnet --version
      dotnet --list-sdks
    displayName: 'Show .NET SDK info'

  - ${{ if eq(parameters.clearCaches, 'true') }}:
    - pwsh: dotnet nuget locals all --clear
      displayName: 'Clear all NuGet caches'

  # Prepare macOS
  - ${{ if ne(parameters.poolName, 'Azure Pipelines') }}:
    - template: agent-cleanser/v1.yml@yaml-templates
      parameters:
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
        UninstallMono: false
        UninstallXamarinMac: false
        CleanseAgentToolsDotNet: true           # Cleanse all .NET versions under the agent tools directory and use only those provisioned by the pipeline
        SelfHealPowerShell: false
        AUTH_TOKEN_GITHUB_COM: $(github--pat--vs-mobiletools-engineering-service2)

  # Provision Xcode
  - ${{ if ne(parameters.skipXcode, 'true') }}:
    - task: xamops.azdevex.provisionator-task.provisionator@2
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
      displayName: 'Provision Xcode'
      inputs:
        provisioning_script: ${{ parameters.checkoutDirectory }}/${{ parameters.provisionatorXCodePath }}
        provisioning_extra_args: ${{ parameters.provisionatorExtraArguments }}
        github_token: ${{ parameters.gitHubToken }}
      env:
        PROVISIONATOR_CHANNEL: ${{ parameters.provisionatorChannel }}
        AUTH_TOKEN_COMPONENTS_MAC_IOS_CERTIFICATE_P12: ${{ parameters.certPass }}

  # Provision Additional Software (Jdk, Android SDKs, etc.)
  - ${{ if ne(parameters.skipProvisioning, 'true') }}:
    - pwsh: |
        dotnet build -t:ProvisionJdk -bl:"$(LogDirectory)/provision-jdk.binlog"
        dotnet build -t:ProvisionAndroidSdk -bl:"$(LogDirectory)/provision-androidsdk.binlog"
      displayName: 'Provision Additional Software'
      condition: succeeded()
      env:
        GITHUB_TOKEN: ${{ parameters.gitHubToken }}
        ${{ if eq(parameters.skipAndroidSdks, true) }}:
          SKIP_ANDROID_API_SDKS: 'true'
        ${{ if eq(parameters.skipAndroidImages, true) }}:
          SKIP_ANDROID_API_IMAGES: 'true'
        ${{ if eq(parameters.installDefaultAndroidApi, true) }}:
          INSTALL_DEFAULT_ANDROID_API: 'true'

  # Setup JAVA_HOME Environment variable
  - pwsh: |
      # Execute the command and capture the JSON output
      $jsonOutput = & android jdk list --format=Json | ConvertFrom-Json
      # Find the first item with DotNetPreferred set to True
      $preferredJdk = $jsonOutput | Where-Object { $_.DotNetPreferred -eq $true } | Select-Object -First 1
      # Get the value of the Home property
      $env:JAVA_HOME = $preferredJdk.Home
      if ($env:JAVA_HOME) {
        echo "##vso[task.setvariable variable=JAVA_HOME]$env:JAVA_HOME"
        echo "JAVA_HOME set to '$env:JAVA_HOME'"
      } else {
        echo "Unable to set JAVA_HOME"
      }
    displayName: 'Setup JDK Paths'
    condition: succeeded()

  - pwsh: |
      if ($env:ANDROID_SDK_ROOT) {
        echo "ANDROID_SDK_ROOT already set to '$env:ANDROID_SDK_ROOT'"
      } else {
        if ((Test-Path "${env:ProgramFiles(x86)}\Android\android-sdk")) {
          $env:ANDROID_SDK_ROOT = "${env:ProgramFiles(x86)}\Android\android-sdk"
        }
        if ($env:ANDROID_SDK_ROOT) {
          echo "##vso[task.setvariable variable=ANDROID_SDK_ROOT]$env:ANDROID_SDK_ROOT"
          echo "ANDROID_SDK_ROOT set to '$env:ANDROID_SDK_ROOT'"
        } else {
          echo "Unable to set ANDROID_SDK_ROOT"
        }
      }
    displayName: 'Setup ANDROID_SDK_ROOT Paths'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

  - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
    - template: ../../common/templates-official/steps/enable-internal-sources.yml

    - template: ../../common/templates-official/steps/enable-internal-runtimes.yml
      parameters:
        federatedServiceConnection: ${{ parameters.federatedServiceConnection }}
        outputVariableName: ${{ parameters.outputVariableName }}
        expiryInHours: ${{ parameters.expiryInHours }}
        base64Encode: ${{ parameters.base64Encode }}
