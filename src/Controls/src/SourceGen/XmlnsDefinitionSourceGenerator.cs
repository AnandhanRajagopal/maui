using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Text;
using Microsoft.Maui.Controls.Xaml;

namespace Microsoft.Maui.Controls.SourceGen;

using static GeneratorHelpers;

[Generator(LanguageNames.CSharp)]
public class XmlnsDefinitionSourceGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext initContext)
	{
		// Read XmlnsDefinition items from MSBuild through AnalyzerConfigOptionsProvider
		var xmlnsDefinitionProvider = initContext.AnalyzerConfigOptionsProvider
			.Select(static (optionsProvider, cancellationToken) => GetXmlnsDefinitions(optionsProvider, cancellationToken))
			.WithTrackingName(TrackingNames.XmlnsDefinitionDataProvider);

		// Generate the assembly attributes only when there are definitions
		initContext.RegisterSourceOutput(xmlnsDefinitionProvider, GenerateXmlnsDefinitionAttributes);
	}

	static ImmutableArray<XmlnsDefinitionData> GetXmlnsDefinitions(AnalyzerConfigOptionsProvider optionsProvider, CancellationToken cancellationToken)
	{
		var globalOptions = optionsProvider.GlobalOptions;
		var definitions = ImmutableArray.CreateBuilder<XmlnsDefinitionData>();

		// Read XmlnsDefinition items encoded as semicolon-separated values in a property
		// Format: "Namespace1;Namespace2|AssemblyName2;Namespace3"
		if (globalOptions.TryGetValue("build_property.MauiXmlnsDefinitions", out var xmlnsDefinitionsProperty) && 
		    !string.IsNullOrEmpty(xmlnsDefinitionsProperty))
		{
			var entries = xmlnsDefinitionsProperty.Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
			
			foreach (var entry in entries)
			{
				var trimmedEntry = entry.Trim();
				if (string.IsNullOrEmpty(trimmedEntry))
					continue;

				var parts = trimmedEntry.Split('|');
				var clrNamespace = parts[0].Trim();
				var assemblyName = parts.Length > 1 ? parts[1].Trim() : null;

				if (!string.IsNullOrEmpty(clrNamespace))
				{
					definitions.Add(new XmlnsDefinitionData(clrNamespace, string.IsNullOrEmpty(assemblyName) ? null : assemblyName));
				}
			}
		}

		return definitions.ToImmutable();
	}

	static void GenerateXmlnsDefinitionAttributes(SourceProductionContext context, ImmutableArray<XmlnsDefinitionData> definitions)
	{
		if (definitions.IsEmpty)
			return;

		var sb = new StringBuilder();
		sb.AppendLine(AutoGeneratedHeaderText);
		sb.AppendLine();
		sb.AppendLine("using Microsoft.Maui.Controls;");
		sb.AppendLine();

		foreach (var definition in definitions)
		{
			if (string.IsNullOrEmpty(definition.AssemblyName))
			{
				sb.AppendLine($"[assembly: XmlnsDefinition(\"{XamlParser.MauiGlobalUri}\", \"{definition.ClrNamespace}\")]");
			}
			else
			{
				sb.AppendLine($"[assembly: XmlnsDefinition(\"{XamlParser.MauiGlobalUri}\", \"{definition.ClrNamespace}\", AssemblyName = \"{definition.AssemblyName}\")]");
			}
		}

		context.AddSource("XmlnsDefinitionAttributes.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
	}

	record XmlnsDefinitionData(string ClrNamespace, string? AssemblyName);
}