using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.Maui.Controls.SourceGen;

[Generator(LanguageNames.CSharp)]
public class XmlnsDefinitionGenerator : IIncrementalGenerator
{
	const string AutoGeneratedHeaderText = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
";

	const string DefaultXmlNamespace = "http://schemas.microsoft.com/dotnet/maui/global";

	public void Initialize(IncrementalGeneratorInitializationContext initContext)
	{
		var xmlnsDefinitionsProvider = initContext.AnalyzerConfigOptionsProvider
			.Select(GetXmlnsDefinitions)
			.WithTrackingName(TrackingNames.XmlnsDefinitions);

		initContext.RegisterSourceOutput(xmlnsDefinitionsProvider, GenerateSource);
	}

	static List<XmlnsDefinitionItem> GetXmlnsDefinitions(AnalyzerConfigOptionsProvider optionsProvider, CancellationToken cancellationToken)
	{
		var items = new List<XmlnsDefinitionItem>();
		var globalOptions = optionsProvider.GlobalOptions;

		// Try to get the semicolon-separated list of namespace/assembly pairs
		if (globalOptions.TryGetValue("build_property.XmlnsDefinitionItems", out var itemsProperty) && !string.IsNullOrEmpty(itemsProperty))
		{
			var itemPairs = itemsProperty.Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
			foreach (var pair in itemPairs)
			{
				var parts = pair.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
				if (parts.Length >= 1)
				{
					var clrNamespace = parts[0].Trim();
					var assemblyName = parts.Length > 1 ? parts[1].Trim() : null;

					// Only add if the namespace is not empty after trimming
					if (!string.IsNullOrEmpty(clrNamespace))
					{
						// If assemblyName is empty or whitespace, treat it as null
						if (string.IsNullOrWhiteSpace(assemblyName))
							assemblyName = null;

						items.Add(new XmlnsDefinitionItem(DefaultXmlNamespace, clrNamespace, assemblyName));
					}
				}
			}
		}

		return items;
	}

	static void GenerateSource(SourceProductionContext context, List<XmlnsDefinitionItem> xmlnsDefinitions)
	{
		if (xmlnsDefinitions.Count == 0)
			return;

		var sb = new StringBuilder();
		sb.AppendLine(AutoGeneratedHeaderText);
		sb.AppendLine("using Microsoft.Maui.Controls;");
		sb.AppendLine();

		foreach (var item in xmlnsDefinitions)
		{
			sb.Append($"[assembly: XmlnsDefinition(\"{item.XmlNamespace}\", \"{item.ClrNamespace}\"");
			if (!string.IsNullOrEmpty(item.AssemblyName))
			{
				sb.Append($", AssemblyName = \"{item.AssemblyName}\"");
			}
			sb.AppendLine(")]");
		}

		context.AddSource("XmlnsDefinitions.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
	}

	class XmlnsDefinitionItem
	{
		public XmlnsDefinitionItem(string xmlNamespace, string clrNamespace, string? assemblyName)
		{
			XmlNamespace = xmlNamespace;
			ClrNamespace = clrNamespace;
			AssemblyName = assemblyName;
		}

		public string XmlNamespace { get; }
		public string ClrNamespace { get; }
		public string? AssemblyName { get; }
	}
}