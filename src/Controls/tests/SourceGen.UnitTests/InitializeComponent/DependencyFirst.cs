using System.Linq;
using NUnit.Framework;

namespace Microsoft.Maui.Controls.SourceGen.UnitTests;

public class DependencyFirst : SourceGenXamlInitializeComponentTestBase
{
	[Test]
	public void InflateusingTreeOrder()
	{
		var xaml =
"""
<?xml version="1.0" encoding="UTF-8"?>
<ContentPage
	xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
	xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
	x:Class="Test.TestPage"
	Title="Test Page">
		<StackLayout>
			<Button x:Name="MyButton" Text="Hello MAUI!" />
		</StackLayout>
</ContentPage>
""";

		var code =
"""
using System;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Controls.Xaml;

namespace Test;

[XamlProcessing(XamlInflator.SourceGen)]
public partial class TestPage : ContentPage
{
	public TestPage()
	{
		InitializeComponent();
	}
}
""";

		var expected =
"""

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace Test;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Maui.Controls.SourceGen, Version=10.0.0.0, Culture=neutral, PublicKeyToken=null", "10.0.0.0")]
public partial class TestPage
{
	private partial void InitializeComponent()
	{
		global::System.Lazy<global::Microsoft.Maui.Controls.StackLayout> stackLayout;
		global::System.Lazy<global::Microsoft.Maui.Controls.Button> button;


		button = new global::System.Lazy<global::Microsoft.Maui.Controls.Button>(() => {
			var button1 = new global::Microsoft.Maui.Controls.Button();
			global::Microsoft.Maui.VisualDiagnostics.RegisterSourceInfo(button1!, new global::System.Uri(@"Test.xaml;assembly=SourceGeneratorDriver.Generated", global::System.UriKind.Relative), 8, 5);
			button1.SetValue(global::Microsoft.Maui.Controls.Button.TextProperty, "Hello MAUI!");
			return button1;
		});

		stackLayout = new global::System.Lazy<global::Microsoft.Maui.Controls.StackLayout>(() => {
			var stackLayout1 = new global::Microsoft.Maui.Controls.StackLayout();
			global::Microsoft.Maui.VisualDiagnostics.RegisterSourceInfo(stackLayout1!, new global::System.Uri(@"Test.xaml;assembly=SourceGeneratorDriver.Generated", global::System.UriKind.Relative), 7, 4);
#line 8 "Test.xaml"
			((global::System.Collections.Generic.ICollection<global::Microsoft.Maui.IView>)stackLayout1.Children).Add((global::Microsoft.Maui.IView)button1);
#line default
			return stackLayout1;
		});

		this.SetValue(global::Microsoft.Maui.Controls.Page.TitleProperty, "Test Page");
		this.SetValue(global::Microsoft.Maui.Controls.ContentPage.ContentProperty, stackLayout1);

	}
}

""";

		var (result, generated) = RunGenerator(xaml, code, treeOrder:true);
		Assert.IsFalse(result.Diagnostics.Any());

		Assert.AreEqual(expected, generated);
	}
}